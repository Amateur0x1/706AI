import Head from 'next/head'
import { MilkdownEditor } from '@/components/Editor'
import { MilkdownProvider, useEditor, useInstance } from '@milkdown/react'
import { useEffect, useState } from 'react';
import axios from 'axios'
import { getMarkdown, replaceAll } from '@milkdown/utils';
import { listener, listenerCtx } from '@milkdown/plugin-listener';
import { Editor, defaultValueCtx, rootCtx } from '@milkdown/core';
import { nord } from '@milkdown/theme-nord';
import { commonmark } from '@milkdown/preset-commonmark';
import { Ctx } from '@milkdown/ctx';
import PostItem from '@/types/PostType';
import { ItemData } from '@/types/types';

interface ApiResponse {
    markdown: string;
    // 其他字段
}

function get(item_id: string): Promise<string> {
    return new Promise((resolve, reject) => {
        axios.get<ApiResponse>('http://170.106.171.172:8000/items/' + item_id)
            .then(response => {
                const markdown = response.data.markdown;
                console.log(markdown);
                resolve(markdown); // 异步操作完成后，resolve 返回的数据
            })
            .catch(error => {
                // 请求失败，处理错误
                console.error('Error:', error);
                reject(error); // 异步操作失败时，reject 错误信息
            });
    });
}


export default function Home() {
    const [isClient, setIsClient] = useState(false);

    useEffect(() => {
        setIsClient(true);
    }, []);
    const [text, setText] = useState('');
    const [authorId, setAuthorId] = useState('');
    const handleSubmmit = () => {
        console.log(text)

        const postItemInstance = new PostItem('http://170.106.171.172:8000/items/');
        const itemData: ItemData = {
            source_url: 'http://ex.com',
            parent_id: 4,
            author_id: parseInt(authorId),
            markdown: text,
        };
        postItemInstance.postItem(itemData);
    }
    const [ctxx, setCtx] = useState<Ctx | undefined>(undefined);

    const handleGet = async () => {
        const text = await get(tokenInputValue);
        if (!ctxx) {
            return;
        } else {
            replaceAll(text)(ctxx);
        }
    }
    const [tokenInputValue, setInputValue] = useState('');
    const handleTokenInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setInputValue(event.target.value);
    }
    const handleAuthorInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setAuthorId(event.target.value);
    }

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <div className="container">
                    <div className="header">
                        <div className="header-get">
                            <span className="custom-text">
                                item_id:
                            </span>
                            <input value={tokenInputValue} onChange={handleTokenInputChange} type="text" placeholder="Type here" className=" custom-input-style" />
                            <button onClick={handleGet} className="bg-green-500 w-20 h-10 text-white font-bold rounded hover:bg-blue-600">get</button>
                        </div>
                        <div className="header-other">
                            <button className="bg-green-500 w-20 h-10 text-white font-bold rounded hover:bg-blue-600">打开预览</button>
                            <button className="bg-green-500 w-20 h-10 text-white font-bold rounded hover:bg-blue-600">关闭预览</button>
                            <button className="bg-green-500 w-24 h-10 text-white font-bold rounded hover:bg-blue-600">查看原文件</button>
                        </div>
                    </div>
                    <div id="editor" className="markdown w-full">
                        <MilkdownProvider>
                            {isClient && <MilkdownEditor setText={setText} setCtx={setCtx} />}
                        </MilkdownProvider>
                    </div>
                    <div className="submit">
                        <span className='custom-text'>
                            token:
                        </span>
                        <input value={authorId} onChange={handleAuthorInputChange} type="text" placeholder="Type here" className=" custom-input-style" />
                        <button onClick={handleSubmmit} className=" bg-green-500 w-20 h-10 text-white font-bold rounded hover:bg-blue-600">
                            Submit
                        </button>
                    </div>
                </div >

            </main >
        </>
    )
}
